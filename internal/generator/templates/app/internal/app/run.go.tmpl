package app

import (
	"{{ .App.Module }}/internal/handler/http"
	"{{ .App.Module }}/internal/handler/http/api/v1"
	"{{ .App.Module }}/pkg/gracy"
	"fmt"
	"go.uber.org/zap"
)

func (app *App) Start() {
	go func() {
		app.StartHttpServer()
	}()

	err := gracy.Wait()
	if err != nil {
		app.logger.Error("failed to gracefully shutdown server", zap.Error(err))
	}
	app.logger.Info("server gracefully stopped")
}

func (app *App) StartHttpServer() {
	handler := v1.NewHandler(app.c.GetUseCase(), app.logger)

	router := http.NewRouter()
	router.
		//WithMetrics().
		//WithHealthChecks(app.hc).
		WithSwagger().
		WithHandler(handler, app.logger).
		WithProfiler()

	srv := http.NewServer(app.cfg.HTTP)
	srv.RegisterRoutes(router)

	gracy.AddCallback(func() error {
		return srv.Stop()
	})

	app.logger.Info(fmt.Sprintf("starting HTTP server at %s:%s", app.cfg.HTTP.Host, app.cfg.HTTP.Port))
	err := srv.Start()
	if err != nil {
		app.logger.Fatal("Fail to start %s http server:", zap.String("app",app.cfg.App.Name), zap.Error(err))
	}
}
