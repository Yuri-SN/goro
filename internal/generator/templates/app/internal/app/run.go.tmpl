package app

import (
	"{{ .App.Module }}/internal/handler/http"
	"{{ .App.Module }}/internal/handler/http/api/v1"
	"{{ .App.Module }}/pkg/gracy"
	"fmt"
	"go.uber.org/zap"
)

func (a *App) Start() {
	go func() {
		a.StartHttpServer()
	}()

	err := gracy.Wait()
	if err != nil {
		a.logger.Error("failed to gracefully shutdown server", zap.Error(err))
	}
	a.logger.Info("server gracefully stopped")
}

func (a *App) StartHttpServer() {
	handler := v1.NewHandler(a.c.GetUseCase(), a.logger)

	router := http.NewRouter()
	router.
		//WithMetrics().
		//WithHealthChecks(app.hc).
		WithSwagger().
		WithHandler(handler, a.logger).
		WithProfiler()

	srv := http.NewServer(a.cfg.HTTP)
	srv.RegisterRoutes(router)

	gracy.AddCallback(func() error {
		return srv.Stop()
	})

	a.logger.Info(fmt.Sprintf("starting HTTP server at %s:%s", a.cfg.HTTP.Host, a.cfg.HTTP.Port))
	err := srv.Start()
	if err != nil {
		a.logger.Fatal("Fail to start %s http server:", zap.String("app",a.cfg.App.Name), zap.Error(err))
	}
}
