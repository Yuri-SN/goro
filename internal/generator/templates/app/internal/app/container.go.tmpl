package app

import (
    {{if .Storages}}
        {{range .Storages -}}
            {{if eq .Type `mysqlx`}}"github.com/jmoiron/sqlx"{{end}}
            {{if eq .Type `mysql`}}"database/sql"{{end}}
        {{end -}}
    {{end}}

    "{{ $.App.Module }}/{{$.UseCase.Pkg}}"

    {{if .Dependencies}}
        {{range .Dependencies -}}
            "{{ $.App.Module }}/{{.Pkg}}"
        {{end -}}
    {{end}}
)

type Container struct {
	{{if .Storages}}
		//goro:container databases
		{{range $key, $val := .Storages}}
    		{{$key}} {{$val.Connection}}
		{{end -}}
	{{end}}

	deps    map[string]interface{}
}

func NewContainer({{if .Storages}}{{range $key, $val := .Storages}}{{$key}} {{$val.Connection}},{{end -}}{{end}}) *Container {
	
    return &Container{
		{{if .Storages}}
            
            //goro:container databases
            {{range $key, $val := .Storages}}
                {{$key}}: {{$key}},
            {{end -}}
	    {{end}}
		deps:    make(map[string]interface{}),
	}
}

func (c *Container) GetUseCase() {{ $.UseCase.Type }} {

    return {{ $.UseCase.BuildFunc }}({{range $p := $.UseCase.Deps}} c.get{{toCamelCase $p}}(), {{end}})
}

{{if .Storages}}
    {{range $key, $val := .Storages}}
        func (c *Container) get{{toCamelCase $key.String }}() {{ $val.Connection }} {

            return c.{{$key.String}}
        }
    {{end}}
{{end}}

{{if .Dependencies}}
    {{range $key, $val := .Dependencies}}
        func (c *Container) get{{toCamelCase $key.String }}() {{ $val.Type }} {
            
            return {{ $val.BuildFunc }} ({{range $p := $val.Deps}} c.get{{toCamelCase $p}}(), {{end}})
        }
    {{end}}
{{end}}