package app

import (
    {{ renderImports "storage" "definition" .Chunks }}

    "{{ $.App.Module }}/{{$.UseCase.Pkg}}"

    {{if .Services}}
        {{range .Services -}}
            "{{ $.App.Module }}/{{.Pkg}}"
        {{end -}}
    {{end}}

    {{if .Adapters}}
        {{range .Adapters -}}
            "{{ $.App.Module }}/{{.Pkg}}"
        {{end -}}
    {{end}}
)

type Container struct {
	{{ renderDefinition "storage" .Chunks }}

	deps    map[string]interface{}
}

func NewContainer({{ renderArgs "storage" .Chunks }}) *Container {
	
    return &Container{
		{{ renderStructPopulation "storage" .Chunks }}
		deps:    make(map[string]interface{}),
	}
}

func (c *Container) GetUseCase() {{ $.UseCase.Type }} {

    return {{ $.UseCase.BuildFunc }}({{range $p := $.UseCase.Deps}} c.get{{toCamelCase $p}}(), {{end}})
}

{{range .Chunks}}
    {{if eq .Scope `storage`}}
        func (c *Container) get{{toCamelCase .Name}}() {{.ReturnType}} {
            return c.{{.Name}}
        }
    {{end}}
{{end}}

{{if .Services}}
    {{range $key, $val := .Services}}
        func (c *Container) get{{toCamelCase $key.String }}() {{ $val.Type }} {
            
            return {{ $val.BuildFunc }} ({{range $p := $val.Deps}} c.get{{toCamelCase $p}}(), {{end}})
        }
    {{end}}
{{end}}

{{if .Adapters}}
    {{range $key, $val := .Adapters}}
        func (c *Container) get{{toCamelCase $key.String }}() {{ $val.Type }} {

            return {{ $val.BuildFunc }} ({{range $p := $val.Deps}} c.get{{toCamelCase $p}}(), {{end}})
        }
    {{end}}
{{end}}